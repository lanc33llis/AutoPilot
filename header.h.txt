#pragma once
#include <vector>
#include <functional>
#include <algorithm> 
#include <array>
#include <cmath>
#include <cstdint>
#include <math.h>

void hermite_cubic_to_power_cubic(double x1, double f1, double d1, double x2,
	double f2, double d2, double &c0, double &c1, double &c2, double &c3);


namespace AP
{

	class AutoPilot
	{
	public:
		double MaxJerk;
		AutoPilot(double Jerk);
		~AutoPilot();
	};

	struct TankDrive
	{
		std::vector<std::vector<double>> LeftMotors, RightMotors;
	};

	struct Waypoint
	{
		double X, Y, Angle;
	};

	typedef std::vector<Waypoint> Path;

	struct SplineFunction
	{
		Waypoint PointOne, PointTwo;
		double Ax, Bx, Cx, Dx;
	};

	typedef std::vector<SplineFunction> Spline;

	struct Segment
	{
		SplineFunction Function, XFunction, YFunction;
		double Velocity(double Seconds); double Acceleration(double Seconds); double Jerk(double Seconds);
		double Ax, Bx, C, Time;
	};

	typedef std::vector<Segment> Trajectory;

	//finds deriv or slope of an angle. Used to find exit angle slope or deriv
	double Angle2Deriv(double AngleInDegrees);

	//Finds the distance of a spline function using arc length
	double ArcLengthDistance(SplineFunction TheSplineFunction);

	//Finds the time needed to traverse the distance given velocity, acceleration, and jerk
	double TimeGivenSFJ(SplineFunction TheSplineFunction, double Jerk);

	SplineFunction HermiteFinder(Waypoint PointOne, Waypoint PointTwo);

	Spline GenerateSpline(Path ThePath);

	double CubicFunction(double X);

	Segment GenerateSegment(SplineFunction function, double Jerk);

	Trajectory GenerateTrajectory(Spline Spline, double Jerk);

}

AP::Waypoint point1{ 0, 0, 1 };
AP::Waypoint point2{ 3, 5, 20 };
AP::Waypoint point3{ 6, 10, 0 };
AP::Path MyPath{ point1, point2, point3 };
AP::Trajectory MyTrajectory;